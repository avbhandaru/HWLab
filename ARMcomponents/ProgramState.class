package edu.cornell.cs3410;

import com.cburch.logisim.data.BitWidth;
import com.cburch.logisim.data.Value;
import com.cburch.logisim.instance.Instance;
import com.cburch.logisim.instance.InstanceData;
import com.cburch.logisim.instance.InstanceState;
import com.cburch.logisim.proj.Project;

public class ProgramState
  implements InstanceData, Cloneable
{
  ProgramAssembler.Listing code;
  int pc;
  private Project proj;
  private Instance instance;
  private static final int PC_UNDEFINED = -1;
  private static final int PC_ERROR = -2;
  private static final BitWidth OP_WIDTH = BitWidth.create(32);
  
  public static ProgramState get(InstanceState paramInstanceState, ProgramAssembler.Listing paramListing)
  {
    ProgramState localProgramState = (ProgramState)paramInstanceState.getData();
    Instance localInstance = paramInstanceState.getInstance();
    if (localProgramState == null)
    {
      localProgramState = new ProgramState(paramListing);
      paramInstanceState.setData(localProgramState);
    }
    if (localProgramState.code != paramListing)
    {
      localProgramState.code = paramListing;
      paramListing.setListener(localProgramState);
    }
    if (localProgramState.instance != localInstance) {
      localProgramState.instance = localInstance;
    }
    return localProgramState;
  }
  
  private ProgramState(ProgramAssembler.Listing paramListing)
  {
    this.code = paramListing;
    if (paramListing != null) {
      paramListing.setListener(this);
    }
    this.pc = -1;
  }
  
  public Project getProject()
  {
    return this.proj;
  }
  
  public void setProject(Project paramProject)
  {
    this.proj = paramProject;
  }
  
  public void codeChanged()
  {
    if (this.instance != null) {
      this.instance.fireInvalidated();
    }
  }
  
  String decode(int paramInt)
  {
    return ProgramAssembler.disassemble(this.code.instr(paramInt), 4 * paramInt);
  }
  
  Value instr()
  {
    if (this.code == null) {
      return Value.createKnown(OP_WIDTH, 0);
    }
    if (isValidPC()) {
      return Value.createKnown(OP_WIDTH, this.code.instr(this.pc));
    }
    return Value.createError(OP_WIDTH);
  }
  
  boolean haveCodeFor(int paramInt)
  {
    return this.code.segmentOf(paramInt) != null;
  }
  
  boolean isValidPC()
  {
    return this.pc >= 0;
  }
  
  boolean isUndefinedPC()
  {
    return this.pc == -1;
  }
  
  boolean isErrorPC()
  {
    return this.pc == -2;
  }
  
  public ProgramState clone()
  {
    try
    {
      return (ProgramState)super.clone();
    }
    catch (CloneNotSupportedException localCloneNotSupportedException) {}
    return null;
  }
  
  public void update(Value paramValue)
  {
    if (paramValue.isErrorValue()) {
      this.pc = -2;
    } else if (!paramValue.isFullyDefined()) {
      this.pc = -1;
    } else if ((paramValue.toIntValue() & 0x3) != 0) {
      this.pc = -2;
    } else {
      this.pc = (paramValue.toIntValue() >>> 2);
    }
  }
}
