package edu.cornell.cs3410;

import com.cburch.logisim.data.Attribute;
import com.cburch.logisim.data.Attributes;
import com.cburch.logisim.data.Bounds;
import com.cburch.logisim.data.Direction;
import com.cburch.logisim.data.Location;
import com.cburch.logisim.data.Value;
import com.cburch.logisim.instance.InstanceData;
import com.cburch.logisim.instance.InstanceFactory;
import com.cburch.logisim.instance.InstancePainter;
import com.cburch.logisim.instance.InstanceState;
import com.cburch.logisim.instance.Port;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;

class Video
  extends InstanceFactory
{
  private static final int P_CLK = 0;
  private static final int P_WE = 1;
  private static final int P_X = 2;
  private static final int P_Y = 3;
  private static final int P_DATA = 4;
  private static final int P_RST = 5;
  private static final String BLINK_YES = "Blinking Dot";
  private static final String BLINK_NO = "No Cursor";
  private static final String[] BLINK_OPTIONS = { "Blinking Dot", "No Cursor" };
  private static final String RESET_ASYNC = "Asynchronous";
  private static final String RESET_SYNC = "Synchronous";
  private static final String[] RESET_OPTIONS = { "Asynchronous", "Synchronous" };
  private static final Attribute<String> BLINK_OPTION = Attributes.forOption("cursor", new SimpleStringGetter("Cursor"), BLINK_OPTIONS);
  private static final Attribute<String> RESET_OPTION = Attributes.forOption("reset", new SimpleStringGetter("Reset Behavior"), RESET_OPTIONS);
  
  public Video()
  {
    super("LCD Video");
    setAttributes(new Attribute[] { BLINK_OPTION, RESET_OPTION }, new String[] { "Blinking Dot", "Asynchronous" });
    setOffsetBounds(Bounds.create(65266, 65396, 270, 270));
    Port[] arrayOfPort = { new Port(65316, 130, "input", 1), new Port(65336, 130, "input", 1), new Port(65396, 130, "input", 7), new Port(65406, 130, "input", 7), new Port(-120, 130, "input", 16), new Port(65296, 130, "input", 1) };
    arrayOfPort[1].setToolTip(new SimpleStringGetter("Enable: if 1 write pixel to screen"));
    arrayOfPort[2].setToolTip(new SimpleStringGetter("X coordinate"));
    arrayOfPort[3].setToolTip(new SimpleStringGetter("Y coordinate"));
    arrayOfPort[4].setToolTip(new SimpleStringGetter("RGB: in 5-5-5 format"));
    arrayOfPort[5].setToolTip(new SimpleStringGetter("Reset"));
    setPorts(arrayOfPort);
  }
  
  private static Value val(InstanceState paramInstanceState, int paramInt)
  {
    return paramInstanceState.getPortValue(paramInt);
  }
  
  private static int addr(InstanceState paramInstanceState, int paramInt)
  {
    return val(paramInstanceState, paramInt).toIntValue();
  }
  
  public void propagate(InstanceState paramInstanceState)
  {
    Data localData = Data.get(paramInstanceState);
    int i = addr(paramInstanceState, 2);
    int j = addr(paramInstanceState, 3);
    int k = addr(paramInstanceState, 4);
    localData.last_x = i;
    localData.last_y = j;
    localData.color = k;
    String str = (String)paramInstanceState.getAttributeValue(RESET_OPTION);
    if (str == null) {
      str = RESET_OPTIONS[0];
    }
    Graphics localGraphics;
    if ((localData.tick(val(paramInstanceState, 0))) && (val(paramInstanceState, 1) == Value.TRUE))
    {
      localGraphics = localData.img.getGraphics();
      localGraphics.setColor(new Color(localData.img.getColorModel().getRGB(k)));
      localGraphics.fillRect(i * 2, j * 2, 2, 2);
      if (("Synchronous".equals(str)) && (val(paramInstanceState, 5) == Value.TRUE))
      {
        localGraphics.setColor(Color.BLACK);
        localGraphics.fillRect(0, 0, 256, 256);
      }
    }
    if ((!"Synchronous".equals(str)) && (val(paramInstanceState, 5) == Value.TRUE))
    {
      localGraphics = localData.img.getGraphics();
      localGraphics.setColor(Color.BLACK);
      localGraphics.fillRect(0, 0, 256, 256);
    }
  }
  
  public void paintInstance(InstancePainter paramInstancePainter)
  {
    int i = paramInstancePainter.getBounds().getWidth();
    Data localData = Data.get(paramInstancePainter);
    drawVideo(paramInstancePainter, paramInstancePainter.getLocation().getX(), paramInstancePainter.getLocation().getY(), localData, (String)paramInstancePainter.getAttributeValue(BLINK_OPTION), (String)paramInstancePainter.getAttributeValue(RESET_OPTION));
  }
  
  public void paintIcon(InstancePainter paramInstancePainter)
  {
    Graphics localGraphics = paramInstancePainter.getGraphics();
    localGraphics.setColor(Color.BLACK);
    localGraphics.drawRoundRect(0, 0, 15, 15, 3, 3);
    localGraphics.setColor(Color.BLUE);
    localGraphics.fillRect(3, 3, 10, 10);
    localGraphics.setColor(Color.BLACK);
  }
  
  private boolean blink()
  {
    long l = System.currentTimeMillis();
    return l / 1000L % 2L == 0L;
  }
  
  private void drawVideo(InstancePainter paramInstancePainter, int paramInt1, int paramInt2, Data paramData, String paramString1, String paramString2)
  {
    Graphics localGraphics = paramInstancePainter.getGraphics();
    paramInt1 -= 270;
    paramInt2 -= 140;
    localGraphics.drawRoundRect(paramInt1, paramInt2, 269, 269, 6, 6);
    for (int i = 1; i <= 5; i++) {
      paramInstancePainter.drawPort(i);
    }
    localGraphics.drawRect(paramInt1 + 6, paramInt2 + 6, 257, 257);
    paramInstancePainter.drawClock(0, Direction.NORTH);
    localGraphics.drawImage(paramData.img, paramInt1 + 7, paramInt2 + 7, null);
    if (paramString1 == null) {
      paramString1 = BLINK_OPTIONS[0];
    }
    if (("Blinking Dot".equals(paramString1)) && (blink()))
    {
      localGraphics.setColor(new Color(paramData.img.getColorModel().getRGB(paramData.color)));
      localGraphics.fillRect(paramInt1 + 7 + paramData.last_x * 2, paramInt2 + 7 + paramData.last_y * 2, 2, 2);
    }
  }
  
  private static class Data
    implements InstanceData, Cloneable
  {
    public Value lastClock = null;
    public BufferedImage img;
    public int last_x;
    public int last_y;
    public int color;
    
    public static Data get(InstanceState paramInstanceState)
    {
      Data localData = (Data)paramInstanceState.getData();
      if (localData == null)
      {
        localData = new Data(new BufferedImage(256, 256, 9));
        paramInstanceState.setData(localData);
      }
      return localData;
    }
    
    private Data(BufferedImage paramBufferedImage)
    {
      this.img = paramBufferedImage;
    }
    
    public Video clone()
    {
      try
      {
        return (Video)super.clone();
      }
      catch (CloneNotSupportedException localCloneNotSupportedException) {}
      return null;
    }
    
    private boolean tick(Value paramValue)
    {
      boolean bool = (this.lastClock == null) || ((this.lastClock == Value.FALSE) && (paramValue == Value.TRUE));
      this.lastClock = paramValue;
      return bool;
    }
  }
}
