package edu.cornell.cs3410;

import com.cburch.logisim.data.Bounds;
import com.cburch.logisim.data.Value;
import com.cburch.logisim.instance.Instance;
import com.cburch.logisim.instance.InstancePainter;
import com.cburch.logisim.instance.InstancePoker;
import com.cburch.logisim.instance.InstanceState;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;

public class RegisterPoker
  extends InstancePoker
{
  private int idx;
  private int idx2;
  
  public boolean init(InstanceState paramInstanceState, MouseEvent paramMouseEvent)
  {
    return paramInstanceState.getInstance().getBounds().contains(paramMouseEvent.getX(), paramMouseEvent.getY());
  }
  
  public void paint(InstancePainter paramInstancePainter)
  {
    if (this.idx < 1) {
      return;
    }
    Bounds localBounds = paramInstancePainter.getInstance().getBounds();
    RegisterUtils.drawBox(paramInstancePainter.getGraphics(), localBounds, Color.RED, this.idx);
  }
  
  public void keyTyped(InstanceState paramInstanceState, KeyEvent paramKeyEvent)
  {
    RegisterData localRegisterData = RegisterData.get(paramInstanceState);
    if (this.idx < 1) {
      return;
    }
    int i = Character.digit(paramKeyEvent.getKeyChar(), 16);
    if (i < 0) {
      return;
    }
    int j = localRegisterData.regs[this.idx].isFullyDefined() ? localRegisterData.regs[this.idx].toIntValue() : 0;
    Value localValue = Value.createKnown(RegisterUtils.WIDTH, j << 4 | i);
    localRegisterData.regs[this.idx] = localValue;
    int k = RegisterUtils.addr(paramInstanceState, 6);
    if (k == this.idx) {
      paramInstanceState.setPort(1, localValue, 1);
    }
    int m = RegisterUtils.addr(paramInstanceState, 7);
    if (m == this.idx) {
      paramInstanceState.setPort(2, localValue, 1);
    }
  }
  
  public void mousePressed(InstanceState paramInstanceState, MouseEvent paramMouseEvent)
  {
    Bounds localBounds = paramInstanceState.getInstance().getBounds();
    this.idx2 = getRIndex(localBounds, paramMouseEvent.getX(), paramMouseEvent.getY());
  }
  
  public void mouseReleased(InstanceState paramInstanceState, MouseEvent paramMouseEvent)
  {
    Bounds localBounds = paramInstanceState.getInstance().getBounds();
    int i = getRIndex(localBounds, paramMouseEvent.getX(), paramMouseEvent.getY());
    if ((i < 1) || (this.idx2 != i))
    {
      this.idx = 0;
      return;
    }
    this.idx = i;
  }
  
  public void keyPressed(InstanceState paramInstanceState, KeyEvent paramKeyEvent)
  {
    if (this.idx < 0) {
      return;
    }
    switch (paramKeyEvent.getKeyCode())
    {
    case 40: 
    case 225: 
      if (this.idx < 31) {
        this.idx += 1;
      }
      break;
    case 39: 
    case 227: 
      if ((0 < this.idx) && (this.idx < 16)) {
        this.idx += 16;
      }
      break;
    case 38: 
    case 224: 
      if (this.idx > 1) {
        this.idx -= 1;
      }
      break;
    case 37: 
    case 226: 
      if (this.idx > 16) {
        this.idx -= 16;
      }
      break;
    }
  }
  
  private int getRIndex(Bounds paramBounds, int paramInt1, int paramInt2)
  {
    paramInt1 -= paramBounds.getX();
    paramInt2 -= paramBounds.getY();
    if ((paramInt1 < RegisterUtils.boxX(0) - 1) || (paramInt1 > RegisterUtils.boxX(31) + 50 + 1)) {
      return -1;
    }
    if ((paramInt1 > RegisterUtils.boxX(0) + 50 + 1) && (paramInt1 < RegisterUtils.boxX(31) - 1)) {
      return -1;
    }
    if ((paramInt2 < RegisterUtils.boxY(0)) || (paramInt2 > RegisterUtils.boxY(31) + 10)) {
      return -1;
    }
    int i = paramInt2 / 10;
    if (paramInt1 > 80) {
      i += 16;
    }
    if ((i < 0) || (i >= 32)) {
      return -1;
    }
    return i;
  }
}
