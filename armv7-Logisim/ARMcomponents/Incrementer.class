package edu.cornell.cs3410;

import com.cburch.logisim.data.Attribute;
import com.cburch.logisim.data.BitWidth;
import com.cburch.logisim.data.Bounds;
import com.cburch.logisim.data.Value;
import com.cburch.logisim.instance.InstanceFactory;
import com.cburch.logisim.instance.InstancePainter;
import com.cburch.logisim.instance.InstanceState;
import com.cburch.logisim.instance.Port;
import com.cburch.logisim.instance.StdAttr;

class Incrementer
  extends InstanceFactory
{
  Incrementer()
  {
    super("Incrementer");
    setAttributes(new Attribute[] { StdAttr.WIDTH }, new Object[] { BitWidth.create(8) });
    setOffsetBounds(Bounds.create(-30, -15, 30, 30));
    setPorts(new Port[] { new Port(-30, 0, "input", StdAttr.WIDTH), new Port(0, 0, "output", StdAttr.WIDTH) });
  }
  
  public void propagate(InstanceState paramInstanceState)
  {
    Value localValue1 = paramInstanceState.getPortValue(0);
    Value localValue2;
    if (localValue1.isFullyDefined()) {
      localValue2 = Value.createKnown(localValue1.getBitWidth(), localValue1.toIntValue() + 1);
    } else if (localValue1.isErrorValue()) {
      localValue2 = Value.createError(localValue1.getBitWidth());
    } else {
      localValue2 = Value.createUnknown(localValue1.getBitWidth());
    }
    paramInstanceState.setPort(1, localValue2, localValue2.getWidth() + 1);
  }
  
  public void paintInstance(InstancePainter paramInstancePainter)
  {
    paramInstancePainter.drawRectangle(paramInstancePainter.getBounds(), "+1");
    paramInstancePainter.drawPorts();
  }
}
