package edu.cornell.cs3410;

import com.cburch.logisim.data.Attribute;
import com.cburch.logisim.data.AttributeOption;
import com.cburch.logisim.data.BitWidth;
import com.cburch.logisim.data.Bounds;
import com.cburch.logisim.data.Direction;
import com.cburch.logisim.data.Value;
import com.cburch.logisim.instance.InstanceFactory;
import com.cburch.logisim.instance.InstancePainter;
import com.cburch.logisim.instance.InstanceState;
import com.cburch.logisim.instance.Port;
import com.cburch.logisim.instance.StdAttr;
import com.cburch.logisim.util.GraphicsUtil;
import com.cburch.logisim.util.StringUtil;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;

class RegisterFile32
  extends InstanceFactory
{
  private static final Attribute[] ATTRIBUTES = { StdAttr.TRIGGER };
  
  RegisterFile32()
  {
    super("RegisterFile", new SimpleStringGetter("Register File"));
    setAttributes(new Attribute[] { StdAttr.TRIGGER }, new AttributeOption[] { StdAttr.TRIG_RISING });
    setOffsetBounds(Bounds.create(65376, -90, 160, 180));
    int i = 65376;
    int j = 0;
    int k = -90;
    int m = 90;
    setPorts(new Port[] { new Port(i, -10, "input", 32), new Port(j, k + 40, "output", 32), new Port(j, m - 40, "output", 32), new Port(i + 80 - 40, m, "input", 1), new Port(i, m - 10, "input", 1), new Port(i + 80 - 10, m, "input", 5), new Port(i + 80 + 30, m, "input", 5), new Port(i + 80 + 50, m, "input", 5) });
    setInstancePoker(RegisterPoker.class);
  }
  
  public void propagate(InstanceState paramInstanceState)
  {
    RegisterData localRegisterData = RegisterData.get(paramInstanceState);
    AttributeOption localAttributeOption = (AttributeOption)paramInstanceState.getAttributeValue(StdAttr.TRIGGER);
    if ((localRegisterData.updateClock(RegisterUtils.val(paramInstanceState, 4), localAttributeOption)) && (RegisterUtils.val(paramInstanceState, 3) != Value.FALSE))
    {
      i = RegisterUtils.addr(paramInstanceState, 5);
      Value localValue1 = RegisterUtils.val(paramInstanceState, 0);
      if (i < 0) {
        localRegisterData.reset(RegisterUtils.zzzz);
      } else if (i != 0) {
        if (i < 32) {
          localRegisterData.regs[i] = localValue1;
        } else {
          throw new IllegalArgumentException("Write address invalid: Please email kwalsh@cs and tell him!");
        }
      }
    }
    int i = RegisterUtils.addr(paramInstanceState, 6);
    int j = RegisterUtils.addr(paramInstanceState, 7);
    if ((i >= 32) || (j >= 32)) {
      throw new IllegalArgumentException("Read address invalid: Please email kwalsh@cs and tell him!");
    }
    Value localValue2 = i < 32 ? localRegisterData.regs[i] : i < 0 ? RegisterUtils.zzzz : RegisterUtils.xxxx;
    Value localValue3 = j < 32 ? localRegisterData.regs[j] : j < 0 ? RegisterUtils.zzzz : RegisterUtils.xxxx;
    paramInstanceState.setPort(1, localValue2, 9);
    paramInstanceState.setPort(2, localValue3, 9);
  }
  
  public void paintInstance(InstancePainter paramInstancePainter)
  {
    paramInstancePainter.drawRectangle(paramInstancePainter.getBounds(), "");
    paramInstancePainter.drawClock(4, Direction.EAST);
    paramInstancePainter.drawPort(5);
    paramInstancePainter.drawPort(0);
    paramInstancePainter.drawPort(3);
    paramInstancePainter.drawPort(6);
    paramInstancePainter.drawPort(1);
    paramInstancePainter.drawPort(7);
    paramInstancePainter.drawPort(2);
    Graphics localGraphics = paramInstancePainter.getGraphics();
    Bounds localBounds = paramInstancePainter.getBounds();
    Font localFont = localGraphics.getFont().deriveFont(9.0F);
    int i = localBounds.getX();
    int j = localBounds.getX() + 160;
    int k = localBounds.getY();
    int m = localBounds.getY() + 180;
    GraphicsUtil.drawText(localGraphics, localFont, "W", i + 2, k + 90 - 10, -1, 0);
    GraphicsUtil.drawText(localGraphics, localFont, "A", j - 2, k + 40, 1, 0);
    GraphicsUtil.drawText(localGraphics, localFont, "B", j - 2, m - 40, 1, 0);
    GraphicsUtil.drawText(localGraphics, "WE", i + 80 - 40, m - 1, 0, 2);
    GraphicsUtil.drawText(localGraphics, "rW", i + 80 - 10, m - 1, 0, 2);
    GraphicsUtil.drawText(localGraphics, "rA", i + 80 + 30, m - 1, 0, 2);
    GraphicsUtil.drawText(localGraphics, "rB", i + 80 + 50, m - 1, 0, 2);
    for (int n = 0; n < 32; n++) {
      RegisterUtils.drawBox(localGraphics, localBounds, Color.GRAY, n);
    }
    for (n = 0; n < 32; n++) {
      GraphicsUtil.drawText(localGraphics, localFont, "$" + n, localBounds.getX() + RegisterUtils.boxX(n) - 1, localBounds.getY() + RegisterUtils.boxY(n) + 4, 1, 0);
    }
    if (!paramInstancePainter.getShowState()) {
      return;
    }
    localGraphics.setColor(Color.LIGHT_GRAY);
    localGraphics.fillRect(localBounds.getX() + RegisterUtils.boxX(0) + 1, localBounds.getY() + RegisterUtils.boxY(0) + 1, 49, 9);
    localGraphics.setColor(Color.BLACK);
    RegisterData localRegisterData = RegisterData.get(paramInstancePainter);
    for (int i1 = 0; i1 < 32; i1++)
    {
      int i2 = localRegisterData.regs[i1].toIntValue();
      String str = localRegisterData.regs[i1].isFullyDefined() ? StringUtil.toHexString(RegisterUtils.WIDTH.getWidth(), i2) : "?";
      GraphicsUtil.drawText(localGraphics, localFont, str, localBounds.getX() + RegisterUtils.boxX(i1) + 25, localBounds.getY() + RegisterUtils.boxY(i1) + 4, 0, 0);
    }
  }
}
