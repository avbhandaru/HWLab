package edu.cornell.cs3410;

import com.cburch.hex.HexModel;
import com.cburch.hex.HexModelListener;
import com.cburch.logisim.data.Bounds;
import com.cburch.logisim.instance.InstanceData;
import com.cburch.logisim.util.GraphicsUtil;
import com.cburch.logisim.util.StringUtil;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;

class MemState
  implements InstanceData, Cloneable, HexModelListener
{
  private static final int ROWS = 4;
  private static final int TABLE_WIDTH12 = 65;
  private static final int TABLE_WIDTH32 = 65;
  private static final int ENTRY_HEIGHT = 15;
  private static final int ENTRY_XOFFS12 = 60;
  private static final int ENTRY_XOFFS32 = 60;
  private static final int ENTRY_YOFFS = 5;
  private static final int ADDR_WIDTH_PER_CHAR = 10;
  private static int DATA_WIDTH_PER_BYTE = 0;
  static final Font font = new Font("Monospaced", 0, 12);
  private MemContents contents;
  private int columns;
  private long curScroll = 0L;
  private long cursorLoc = -1L;
  private long curAddr = -1L;
  private int curMask = 15;
  
  MemState(MemContents paramMemContents)
  {
    this.contents = paramMemContents;
    setBits(paramMemContents.getLogLength(), paramMemContents.getWidth());
    paramMemContents.addHexModelListener(this);
  }
  
  public MemState clone()
  {
    try
    {
      MemState localMemState = (MemState)super.clone();
      localMemState.contents = this.contents.clone();
      localMemState.contents.addHexModelListener(localMemState);
      return localMemState;
    }
    catch (CloneNotSupportedException localCloneNotSupportedException) {}
    return null;
  }
  
  private void setBits(int paramInt1, int paramInt2)
  {
    if (this.contents == null) {
      this.contents = MemContents.create(paramInt1, paramInt2);
    } else {
      this.contents.setDimensions(paramInt1, paramInt2);
    }
    this.columns = 1;
    long l1 = this.contents.getLastOffset();
    if (this.cursorLoc > l1) {
      this.cursorLoc = l1;
    }
    if (this.curAddr - l1 > 0L) {
      this.curAddr = -1L;
    }
    long l2 = Math.max(0L, l1 + 1L - 3 * this.columns);
    if (this.curScroll > l2) {
      this.curScroll = l2;
    }
  }
  
  public MemContents getContents()
  {
    return this.contents;
  }
  
  int getAddrBits()
  {
    return this.contents.getLogLength();
  }
  
  int getDataBits()
  {
    return this.contents.getWidth();
  }
  
  long getLastAddress()
  {
    return (1L << this.contents.getLogLength()) - 1L;
  }
  
  boolean isValidAddr(long paramLong)
  {
    int i = this.contents.getLogLength();
    return paramLong >>> i == 0L;
  }
  
  int getRows()
  {
    return 4;
  }
  
  int getColumns()
  {
    return this.columns;
  }
  
  long getCursor()
  {
    return this.cursorLoc;
  }
  
  long getCurrent()
  {
    return this.curAddr;
  }
  
  int getCurrentMask()
  {
    return this.curMask;
  }
  
  long getScroll()
  {
    return this.curScroll;
  }
  
  void setCursor(long paramLong)
  {
    this.cursorLoc = (isValidAddr(paramLong) ? paramLong : -1L);
  }
  
  void setCurrent(long paramLong, int paramInt)
  {
    this.curAddr = (isValidAddr(paramLong) ? paramLong : -1L);
    this.curMask = paramInt;
  }
  
  void scrollToShow(long paramLong)
  {
    if (isValidAddr(paramLong))
    {
      paramLong = paramLong / this.columns * this.columns;
      long l = this.curScroll / this.columns * this.columns;
      if (paramLong < l)
      {
        this.curScroll = paramLong;
      }
      else if (paramLong >= l + 4 * this.columns)
      {
        this.curScroll = (paramLong - 3 * this.columns);
        if (this.curScroll < 0L) {
          this.curScroll = 0L;
        }
      }
    }
  }
  
  void setScroll(long paramLong)
  {
    long l = getLastAddress() - 4 * this.columns;
    if (paramLong > l) {
      paramLong = l;
    }
    if (paramLong < 0L) {
      paramLong = 0L;
    }
    this.curScroll = paramLong;
  }
  
  public long getAddressAt(int paramInt1, int paramInt2)
  {
    int i = getAddrBits();
    int j = i <= 12 ? 60 : 60;
    int k = i <= 12 ? 65 : 65;
    if ((paramInt1 < j) || (paramInt1 >= j + k) || (paramInt2 <= 5) || (paramInt2 >= 65)) {
      return -1L;
    }
    int m = (paramInt1 - j) / (k / this.columns);
    int n = (paramInt2 - 5) / 15;
    long l = this.curScroll / this.columns * this.columns + this.columns * n + m;
    return isValidAddr(l) ? l : getLastAddress();
  }
  
  public Bounds getBounds(long paramLong, Bounds paramBounds)
  {
    int i = getAddrBits();
    int j = paramBounds.getX() + (i <= 12 ? 60 : 60);
    int k = i <= 12 ? 65 : 65;
    if (paramLong < 0L)
    {
      m = (this.contents.getWidth() + 3) / 4;
      n = 10 * m;
      return Bounds.create(j - n, paramBounds.getY() + 5, n, 15);
    }
    int m = addrToX(paramBounds, paramLong);
    int n = addrToY(paramBounds, paramLong);
    return Bounds.create(m, n, k / this.columns, 15);
  }
  
  public void paint(Graphics paramGraphics, int paramInt1, int paramInt2)
  {
    int i = getAddrBits();
    int j = this.contents.getWidth();
    int k = paramInt1 + (i <= 12 ? 60 : 60);
    int m = paramInt2 + 5;
    int n = i <= 12 ? 65 : 65;
    int i1 = 60;
    if (DATA_WIDTH_PER_BYTE == 0)
    {
      FontMetrics localFontMetrics = paramGraphics.getFontMetrics(font);
      DATA_WIDTH_PER_BYTE = localFontMetrics.stringWidth("00");
    }
    GraphicsUtil.switchToWidth(paramGraphics, 1);
    paramGraphics.drawRect(k, m, n, i1);
    int i2 = n / this.columns;
    for (int i3 = 0; i3 < 4; i3++)
    {
      long l = this.curScroll / this.columns * this.columns + this.columns * i3;
      int i4 = k;
      int i5 = m + 15 * i3;
      int i6 = 12;
      if (isValidAddr(l))
      {
        paramGraphics.setColor(Color.GRAY);
        GraphicsUtil.drawText(paramGraphics, font, StringUtil.toHexString(getAddrBits(), (int)l), i4 - 2, i5 + i6, 1, 1);
      }
      paramGraphics.setColor(Color.BLACK);
      for (int i7 = 0; (i7 < this.columns) && (isValidAddr(l)); i7++)
      {
        int i8 = this.contents.get(l);
        if (l == this.curAddr)
        {
          int i9 = i4 + i2 / 2 + DATA_WIDTH_PER_BYTE;
          for (int i10 = 0; i10 < 4; i10++)
          {
            if ((this.curMask & 1 << i10) != 0)
            {
              paramGraphics.setColor(Color.BLACK);
              paramGraphics.fillRect(i9, i5, DATA_WIDTH_PER_BYTE, 15);
              paramGraphics.setColor(Color.WHITE);
            }
            else
            {
              paramGraphics.setColor(Color.BLACK);
            }
            GraphicsUtil.drawText(paramGraphics, font, StringUtil.toHexString(8, i8 >> 8 * i10 & 0xFF), i9 + DATA_WIDTH_PER_BYTE / 2, i5 + i6, 0, 1);
            i9 -= DATA_WIDTH_PER_BYTE;
          }
          paramGraphics.setColor(Color.BLACK);
        }
        else
        {
          GraphicsUtil.drawText(paramGraphics, font, StringUtil.toHexString(j, i8), i4 + i2 / 2, i5 + i6, 0, 1);
        }
        l += 1L;
        i4 += i2;
      }
    }
  }
  
  private int addrToX(Bounds paramBounds, long paramLong)
  {
    int i = getAddrBits();
    int j = paramBounds.getX() + (i <= 12 ? 60 : 60);
    int k = i <= 12 ? 65 : 65;
    long l1 = this.curScroll / this.columns;
    long l2 = paramLong / this.columns;
    if ((l2 < l1) || (l2 >= l1 + 4L)) {
      return -1;
    }
    int m = (int)(paramLong - l2 * this.columns);
    if ((m < 0) || (m >= this.columns)) {
      return -1;
    }
    return j + k * m / this.columns;
  }
  
  private int addrToY(Bounds paramBounds, long paramLong)
  {
    long l1 = this.curScroll / this.columns;
    long l2 = paramLong / this.columns;
    if ((l2 < l1) || (l2 >= l1 + 4L)) {
      return -1;
    }
    return (int)(paramBounds.getY() + 5 + 15L * (l2 - l1));
  }
  
  public void metainfoChanged(HexModel paramHexModel)
  {
    setBits(this.contents.getLogLength(), this.contents.getWidth());
  }
  
  public void bytesChanged(HexModel paramHexModel, long paramLong1, long paramLong2, int[] paramArrayOfInt) {}
}
