package edu.cornell.cs3410;

import com.cburch.logisim.data.AttributeSet;
import com.cburch.logisim.data.Bounds;
import com.cburch.logisim.instance.Instance;
import com.cburch.logisim.instance.InstancePainter;
import com.cburch.logisim.instance.InstancePoker;
import com.cburch.logisim.instance.InstanceState;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;

public class MemPoker
  extends InstancePoker
{
  private MemPoker sub;
  
  public boolean init(InstanceState paramInstanceState, MouseEvent paramMouseEvent)
  {
    Bounds localBounds = paramInstanceState.getInstance().getBounds();
    MemState localMemState = (MemState)paramInstanceState.getData();
    long l = localMemState.getAddressAt(paramMouseEvent.getX() - localBounds.getX(), paramMouseEvent.getY() - localBounds.getY());
    if (l < 0L) {
      this.sub = new AddrPoker(null);
    } else {
      this.sub = new DataPoker(paramInstanceState, localMemState, l, null);
    }
    return true;
  }
  
  public Bounds getBounds(InstancePainter paramInstancePainter)
  {
    return this.sub.getBounds(paramInstancePainter);
  }
  
  public void paint(InstancePainter paramInstancePainter)
  {
    this.sub.paint(paramInstancePainter);
  }
  
  public void keyTyped(InstanceState paramInstanceState, KeyEvent paramKeyEvent)
  {
    this.sub.keyTyped(paramInstanceState, paramKeyEvent);
  }
  
  private static class AddrPoker
    extends MemPoker
  {
    public Bounds getBounds(InstancePainter paramInstancePainter)
    {
      MemState localMemState = (MemState)paramInstancePainter.getData();
      return localMemState.getBounds(-1L, paramInstancePainter.getBounds());
    }
    
    public void paint(InstancePainter paramInstancePainter)
    {
      Bounds localBounds = getBounds(paramInstancePainter);
      Graphics localGraphics = paramInstancePainter.getGraphics();
      localGraphics.setColor(Color.RED);
      localGraphics.drawRect(localBounds.getX(), localBounds.getY(), localBounds.getWidth(), localBounds.getHeight());
      localGraphics.setColor(Color.BLACK);
    }
    
    public void keyTyped(InstanceState paramInstanceState, KeyEvent paramKeyEvent)
    {
      int i = paramKeyEvent.getKeyChar();
      int j = Character.digit(paramKeyEvent.getKeyChar(), 16);
      MemState localMemState = (MemState)paramInstanceState.getData();
      if (j >= 0)
      {
        long l = localMemState.getScroll() * 16L + j & localMemState.getLastAddress();
        localMemState.setScroll(l);
      }
      else if (i == 32)
      {
        localMemState.setScroll(localMemState.getScroll() + (localMemState.getRows() - 1) * localMemState.getColumns());
      }
      else if ((i == 13) || (i == 10))
      {
        localMemState.setScroll(localMemState.getScroll() + localMemState.getColumns());
      }
      else if ((i == 8) || (i == 127))
      {
        localMemState.setScroll(localMemState.getScroll() - localMemState.getColumns());
      }
    }
  }
  
  private static class DataPoker
    extends MemPoker
  {
    int initValue;
    int curValue;
    
    private DataPoker(InstanceState paramInstanceState, MemState paramMemState, long paramLong)
    {
      paramMemState.setCursor(paramLong);
      this.initValue = paramMemState.getContents().get(paramMemState.getCursor());
      this.curValue = this.initValue;
      AttributeSet localAttributeSet = paramInstanceState.getInstance().getAttributeSet();
    }
    
    public Bounds getBounds(InstancePainter paramInstancePainter)
    {
      MemState localMemState = (MemState)paramInstancePainter.getData();
      Bounds localBounds = paramInstancePainter.getInstance().getBounds();
      return localMemState.getBounds(localMemState.getCursor(), localBounds);
    }
    
    public void paint(InstancePainter paramInstancePainter)
    {
      Bounds localBounds = getBounds(paramInstancePainter);
      Graphics localGraphics = paramInstancePainter.getGraphics();
      localGraphics.setColor(Color.RED);
      localGraphics.drawRect(localBounds.getX(), localBounds.getY(), localBounds.getWidth(), localBounds.getHeight());
      localGraphics.setColor(Color.BLACK);
    }
    
    public void stopEditing(InstanceState paramInstanceState)
    {
      MemState localMemState = (MemState)paramInstanceState.getData();
      localMemState.setCursor(-1L);
    }
    
    public void keyTyped(InstanceState paramInstanceState, KeyEvent paramKeyEvent)
    {
      int i = paramKeyEvent.getKeyChar();
      int j = Character.digit(paramKeyEvent.getKeyChar(), 16);
      MemState localMemState = (MemState)paramInstanceState.getData();
      if (j >= 0)
      {
        this.curValue = (this.curValue * 16 + j);
        localMemState.getContents().set(localMemState.getCursor(), this.curValue);
        paramInstanceState.fireInvalidated();
      }
      else if ((i == 32) || (i == 9))
      {
        moveTo(localMemState, localMemState.getCursor() + 1L);
      }
      else if ((i == 13) || (i == 10))
      {
        moveTo(localMemState, localMemState.getCursor() + localMemState.getColumns());
      }
      else if ((i == 8) || (i == 127))
      {
        moveTo(localMemState, localMemState.getCursor() - 1L);
      }
    }
    
    private void moveTo(MemState paramMemState, long paramLong)
    {
      if (paramMemState.isValidAddr(paramLong))
      {
        paramMemState.setCursor(paramLong);
        paramMemState.scrollToShow(paramLong);
        this.initValue = paramMemState.getContents().get(paramLong);
        this.curValue = this.initValue;
      }
    }
  }
}
