package edu.cornell.cs3410;

import com.cburch.logisim.proj.Action;
import com.cburch.logisim.proj.Project;
import com.cburch.logisim.util.StringUtil;
import com.cburch.logisim.util.WindowMenuItemManager;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

public class ProgramFrame32
  extends JFrame
{
  private static final long serialVersionUID = 5437583663643692635L;
  private WindowMenuManager windowManager = new WindowMenuManager();
  private MyListener myListener = new MyListener(null);
  private ProgramAssembler.Listing code;
  private ListingModel model;
  private JTable listing;
  private Project proj;
  private JButton load = new JButton();
  private JButton close = new JButton();
  
  public ProgramFrame32(ProgramAssembler.Listing paramListing, Project paramProject)
  {
    setDefaultCloseOperation(1);
    this.code = paramListing;
    this.proj = paramProject;
    JPanel localJPanel = new JPanel();
    localJPanel.add(this.load);
    localJPanel.add(this.close);
    this.load.addActionListener(this.myListener);
    this.close.addActionListener(this.myListener);
    setTitle("MIPS Program Listing");
    this.load.setText("Load Program...");
    this.close.setText("Close Window");
    this.model = new ListingModel(null);
    this.listing = new JTable(this.model);
    Font localFont = new Font("Monospaced", 0, 12);
    this.listing.setFont(localFont);
    FontMetrics localFontMetrics = this.listing.getFontMetrics(localFont);
    int i = localFontMetrics.stringWidth("00000000");
    this.listing.setAutoResizeMode(3);
    TableColumn localTableColumn = this.listing.getColumnModel().getColumn(0);
    localTableColumn.setMaxWidth(i + 10);
    localTableColumn.setMinWidth(i + 10);
    localTableColumn = this.listing.getColumnModel().getColumn(1);
    localTableColumn.setMaxWidth(i + 10);
    localTableColumn.setMinWidth(i + 10);
    this.listing.setShowHorizontalLines(false);
    this.listing.setShowVerticalLines(true);
    JScrollPane localJScrollPane = new JScrollPane(this.listing, 22, 31);
    localJScrollPane.setPreferredSize(new Dimension(400, 300));
    Container localContainer = getContentPane();
    localContainer.add(localJScrollPane, "Center");
    localContainer.add(localJPanel, "South");
    pack();
  }
  
  public void setVisible(boolean paramBoolean)
  {
    if ((paramBoolean) && (!isVisible())) {
      this.windowManager.frameOpened(this);
    }
    super.setVisible(paramBoolean);
  }
  
  private class ListingModel
    extends AbstractTableModel
  {
    private static final long serialVersionUID = 4373473477588858456L;
    
    private ListingModel() {}
    
    public int getColumnCount()
    {
      return 3;
    }
    
    public int getRowCount()
    {
      return ProgramFrame32.this.code.getLineCount();
    }
    
    public Object getValueAt(int paramInt1, int paramInt2)
    {
      try
      {
        int i;
        if (paramInt2 == 0)
        {
          i = ProgramFrame32.this.code.getAddressOf(paramInt1);
          if (i == -1) {
            return "";
          }
          return StringUtil.toHexString(32, i);
        }
        if (paramInt2 == 1)
        {
          i = ProgramFrame32.this.code.getAddressOf(paramInt1);
          if (i == -1) {
            return "";
          }
          int j = ProgramFrame32.this.code.instr(i / 4);
          return StringUtil.toHexString(32, j);
        }
        return ProgramFrame32.this.code.getLine(paramInt1);
      }
      catch (Exception localException) {}
      return "???";
    }
    
    public void fireChanged()
    {
      fireTableStructureChanged();
    }
    
    public String getColumnName(int paramInt)
    {
      switch (paramInt)
      {
      case 0: 
        return "Address";
      case 1: 
        return "Binary";
      }
      return "Assembly";
    }
  }
  
  private class MyListener
    implements ActionListener
  {
    private File lastFile = null;
    
    private MyListener() {}
    
    public void actionPerformed(ActionEvent paramActionEvent)
    {
      Object localObject1 = paramActionEvent.getSource();
      Object localObject2;
      if (localObject1 == ProgramFrame32.this.load)
      {
        localObject2 = new JFileChooser();
        if (this.lastFile != null) {
          ((JFileChooser)localObject2).setSelectedFile(this.lastFile);
        }
        ((JFileChooser)localObject2).setDialogTitle("Load MIPS Program");
        int i = ((JFileChooser)localObject2).showOpenDialog(ProgramFrame32.this);
        if (i == 0)
        {
          File localFile = ((JFileChooser)localObject2).getSelectedFile();
          try
          {
            String str1 = ProgramFrame32.this.code.getSource();
            ProgramFrame32.this.code.load(localFile);
            this.lastFile = localFile;
            String str2 = ProgramFrame32.this.code.getSource();
            ProgramState localProgramState = ProgramFrame32.this.code.getState();
            if (localProgramState != null)
            {
              localProgramState.codeChanged();
              Project localProject = localProgramState.getProject();
              if (localProject != null) {
                localProject.doAction(new ProgramFrame32.Change(ProgramFrame32.this, str1, str2));
              }
            }
          }
          catch (IOException localIOException)
          {
            JOptionPane.showMessageDialog(ProgramFrame32.this, localIOException.getMessage(), "Error loading MIPS program", 0);
          }
        }
      }
      else if (localObject1 == ProgramFrame32.this.close)
      {
        localObject2 = new WindowEvent(ProgramFrame32.this, 201);
        ProgramFrame32.this.processWindowEvent((WindowEvent)localObject2);
      }
    }
  }
  
  private class Change
    extends Action
  {
    String oldsrc;
    String newsrc;
    File file;
    boolean completed = false;
    
    Change(String paramString1, String paramString2)
    {
      this.oldsrc = paramString1;
      this.newsrc = paramString2;
    }
    
    public String getName()
    {
      return "Load MIPS Program";
    }
    
    public void doIt(Project paramProject)
    {
      if (this.completed) {
        return;
      }
      this.completed = true;
      try
      {
        ProgramFrame32.this.code.setSource(this.newsrc);
      }
      catch (IOException localIOException) {}
      ProgramState localProgramState = ProgramFrame32.this.code.getState();
      if (localProgramState != null) {
        localProgramState.codeChanged();
      }
      ProgramFrame32.this.model.fireChanged();
    }
    
    public void undo(Project paramProject)
    {
      if (!this.completed) {
        return;
      }
      this.completed = false;
      try
      {
        ProgramFrame32.this.code.setSource(this.oldsrc);
      }
      catch (IOException localIOException) {}
      ProgramState localProgramState = ProgramFrame32.this.code.getState();
      if (localProgramState != null) {
        localProgramState.codeChanged();
      }
      ProgramFrame32.this.model.fireChanged();
    }
  }
  
  private class WindowMenuManager
    extends WindowMenuItemManager
  {
    WindowMenuManager()
    {
      super(false);
    }
    
    public JFrame getJFrame(boolean paramBoolean)
    {
      return ProgramFrame32.this;
    }
  }
}
